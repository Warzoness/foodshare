import { apiClient } from "@/lib/apiClient";
import { CreateOrderRequest, CreateOrderResponse, Order, OrderStatus, ApiResponse } from "@/types/order";
import { AuthService } from "./auth.service";

const ORDER_ENDPOINT = "/orders";

export const OrderService = {
  /**
   * Check if user is authenticated and get token
   * @returns Token or throws error
   */
  getAuthToken(): string {
    const token = AuthService.getStoredToken();
    if (!token) {
      throw new Error('Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    }
    return token;
  },

  /**
   * Translate error messages to Vietnamese
   * @param message - English error message
   * @returns Vietnamese error message
   */
  translateErrorMessage(message: string): string {
    const translations: Record<string, string> = {
      'Insufficient stock': 'Kh√¥ng ƒë·ªß h√†ng trong kho',
      'Product not found': 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m',
      'Shop not found': 'Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng',
      'User not found': 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
      'Invalid quantity': 'S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá',
      'Invalid pickup time': 'Th·ªùi gian l·∫•y h√†ng kh√¥ng h·ª£p l·ªá',
      'Order already exists': 'ƒê∆°n h√†ng ƒë√£ t·ªìn t·∫°i',
      'Payment failed': 'Thanh to√°n th·∫•t b·∫°i',
      'Network error': 'L·ªói m·∫°ng',
      'Server error': 'L·ªói m√°y ch·ªß',
      'Authentication failed': 'X√°c th·ª±c th·∫•t b·∫°i',
      'Unauthorized': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
      'Forbidden': 'B·ªã c·∫•m truy c·∫≠p',
      'Not found': 'Kh√¥ng t√¨m th·∫•y',
      'Bad request': 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá',
      'Internal server error': 'L·ªói m√°y ch·ªß n·ªôi b·ªô',
      'Service unavailable': 'D·ªãch v·ª• kh√¥ng kh·∫£ d·ª•ng',
      'Timeout': 'H·∫øt th·ªùi gian ch·ªù',
      'Failed to create order': 'Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng',
      'Order creation failed': 'T·∫°o ƒë∆°n h√†ng th·∫•t b·∫°i'
    };

    // Check for exact match first
    if (translations[message]) {
      return translations[message];
    }

    // Check for partial matches (case insensitive)
    const lowerMessage = message.toLowerCase();
    for (const [english, vietnamese] of Object.entries(translations)) {
      if (lowerMessage.includes(english.toLowerCase())) {
        return vietnamese;
      }
    }

    // Return original message if no translation found
    return message;
  },
  /**
   * Create a new order (POST /orders)
   * @param orderData - Order creation data
   * @returns Promise<CreateOrderResponse>
   */
  async createOrder(orderData: CreateOrderRequest): Promise<CreateOrderResponse> {
    try {
      const token = this.getAuthToken();

      console.log('üõí Creating order with data:', JSON.stringify(orderData, null, 2));

      const response = await apiClient.post<ApiResponse<CreateOrderResponse>>(ORDER_ENDPOINT, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: orderData
      });

      console.log('üì¶ Order creation response:', JSON.stringify(response, null, 2));

      if (!response.success) {
        // Translate common error messages to Vietnamese
        const errorMessage = response.message || 'Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng';
        const translatedMessage = this.translateErrorMessage(errorMessage);
        throw new Error(translatedMessage);
      }

      return response.data;
    } catch (error) {
      console.error('‚ùå Error creating order:', error);
      throw error;
    }
  },

  /**
   * Get order by ID
   * @param orderId - Order ID
   * @returns Promise<Order>
   */
  async getOrder(orderId: number): Promise<Order> {
    try {
      const token = this.getAuthToken();

      const response = await apiClient.get<ApiResponse<Order>>(`${ORDER_ENDPOINT}/${orderId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.success) {
        const errorMessage = response.message || 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng';
        const translatedMessage = this.translateErrorMessage(errorMessage);
        throw new Error(translatedMessage);
      }

      return response.data;
    } catch (error) {
      console.error('Error fetching order:', error);
      throw error;
    }
  },

  /**
   * Get user's orders
   * @param params - Query parameters
   * @returns Promise<Order[]>
   */
  async getUserOrders(params: {
    page?: number;
    size?: number;
    status?: OrderStatus;
  } = {}): Promise<Order[]> {
    try {
      const token = this.getAuthToken();

      const { page = 0, size = 10, status } = params;
      
      const queryParams: Record<string, any> = { page, size };
      if (status) {
        queryParams.status = status;
      }

      const response = await apiClient.get<ApiResponse<Order[]>>(ORDER_ENDPOINT, {
        headers: {
          'Authorization': `Bearer ${token}`
        },
        query: queryParams
      });

      console.log('üîç Orders API Response:', JSON.stringify(response, null, 2));

      if (!response.success) {
        console.log('‚ùå API returned success: false');
        console.log('üìù Response message:', response.message);
        console.log('üìù Response code:', response.code);
        
        // Check if it's an authentication error
        const message = (response.message || '').toLowerCase();
        const code = (response.code || '').toLowerCase();
        
        if (message.includes('unauthorized') || 
            message.includes('token') || 
            message.includes('authentication') ||
            code.includes('401') ||
            code.includes('unauthorized')) {
          throw new Error('X√°c th·ª±c th·∫•t b·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        }
        
        const errorMessage = response.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng';
        const translatedMessage = this.translateErrorMessage(errorMessage);
        throw new Error(translatedMessage);
      }

      return response.data || [];
    } catch (error) {
      console.error('‚ùå Error fetching user orders:', error);
      
      // If it's a network error or authentication error, provide more context
      if (error instanceof Error) {
        const errorMessage = error.message.toLowerCase();
        
        console.log('üîç Error message:', errorMessage);
        console.log('üîç Error type:', typeof error);
        console.log('üîç Full error object:', error);
        
        // HTTP 401 Unauthorized
        if (errorMessage.includes('401') || 
            errorMessage.includes('unauthorized')) {
          console.log('üö® HTTP 401 detected, throwing authentication error');
          throw new Error('X√°c th·ª±c th·∫•t b·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        }
        
        // Network errors
        if (errorMessage.includes('fetch') || 
            errorMessage.includes('network') ||
            errorMessage.includes('connection')) {
          throw new Error('L·ªói m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i.');
        }
        
        // Authentication errors from API response
        if (errorMessage.includes('authentication') ||
            errorMessage.includes('token')) {
          throw new Error('X√°c th·ª±c th·∫•t b·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        }
        
        // If it's already our custom error, re-throw it
        if (errorMessage.includes('x√°c th·ª±c th·∫•t b·∫°i') || 
            errorMessage.includes('l·ªói m·∫°ng')) {
          throw error;
        }
      }
      
      // For any other errors, provide a generic message
      throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  },

  /**
   * Cancel an order
   * @param orderId - Order ID to cancel
   * @returns Promise<Order>
   */
  async cancelOrder(orderId: number): Promise<Order> {
    try {
      const token = this.getAuthToken();

      const response = await apiClient.patch<ApiResponse<Order>>(`${ORDER_ENDPOINT}/${orderId}/cancel`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.success) {
        const errorMessage = response.message || 'Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng';
        const translatedMessage = this.translateErrorMessage(errorMessage);
        throw new Error(translatedMessage);
      }

      return response.data;
    } catch (error) {
      console.error('Error cancelling order:', error);
      throw error;
    }
  },

  /**
   * Update order status (for testing purposes)
   * @param orderId - Order ID
   * @param status - New status
   * @returns Promise<Order>
   */
  async updateOrderStatus(orderId: number, status: OrderStatus): Promise<Order> {
    try {
      const token = this.getAuthToken();

      const response = await apiClient.patch<ApiResponse<Order>>(`${ORDER_ENDPOINT}/${orderId}/status`, {
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: { status }
      });

      if (!response.success) {
        const errorMessage = response.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng';
        const translatedMessage = this.translateErrorMessage(errorMessage);
        throw new Error(translatedMessage);
      }

      return response.data;
    } catch (error) {
      console.error('Error updating order status:', error);
      throw error;
    }
  },

  /**
   * Delete an order
   * @param orderId - Order ID to delete
   * @returns Promise<boolean>
   */
  async deleteOrder(orderId: number): Promise<boolean> {
    try {
      const token = this.getAuthToken();

      const response = await apiClient.delete<ApiResponse<{ deleted: boolean }>>(`${ORDER_ENDPOINT}/${orderId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.success) {
        return response.data.deleted;
      } else {
        const errorMessage = response.message || 'Kh√¥ng th·ªÉ x√≥a ƒë∆°n h√†ng';
        const translatedMessage = this.translateErrorMessage(errorMessage);
        throw new Error(translatedMessage);
      }
    } catch (error) {
      console.error('‚ùå Error deleting order:', error);
      throw error;
    }
  },

  /**
   * Get user's order statistics
   * @returns Promise<OrderStats>
   */
  async getOrderStats(): Promise<{
    total: number;
    completed: number;
    pending: number;
    cancelled: number;
  }> {
    try {
      const token = this.getAuthToken();

      // Get all orders with a large page size to get complete stats
      const response = await apiClient.get<ApiResponse<Order[]>>(ORDER_ENDPOINT, {
        headers: {
          'Authorization': `Bearer ${token}`
        },
        query: { page: 0, size: 1000 } // Get all orders
      });

      console.log('üìä Order stats API Response:', JSON.stringify(response, null, 2));

      if (!response.success) {
        console.log('‚ùå Order stats API returned success: false');
        console.log('üìù Response message:', response.message);
        
        // Check if it's an authentication error
        const message = (response.message || '').toLowerCase();
        
        if (message.includes('unauthorized') || 
            message.includes('token') || 
            message.includes('authentication')) {
          throw new Error('X√°c th·ª±c th·∫•t b·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        }
        
        const errorMessage = response.message || 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ ƒë∆°n h√†ng';
        const translatedMessage = this.translateErrorMessage(errorMessage);
        throw new Error(translatedMessage);
      }

      const orders = response.data || [];
      
      // Calculate statistics based on new status mapping
      const stats = {
        total: orders.length,
        completed: orders.filter(order => order.status === '4').length, // Ho√†n th√†nh
        pending: orders.filter(order => 
          order.status === '1' || order.status === '2' // Ch·ªù x√°c nh·∫≠n + ƒê√£ x√°c nh·∫≠n
        ).length,
        cancelled: orders.filter(order => order.status === '3').length // ƒê√£ h·ªßy
      };

      console.log('üìä Calculated order stats:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå Error fetching order stats:', error);
      
      // If it's a network error or authentication error, provide more context
      if (error instanceof Error) {
        const errorMessage = error.message.toLowerCase();
        
        // HTTP 401 Unauthorized
        if (errorMessage.includes('401') || 
            errorMessage.includes('unauthorized')) {
          throw new Error('X√°c th·ª±c th·∫•t b·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        }
        
        // Network errors
        if (errorMessage.includes('fetch') || 
            errorMessage.includes('network') ||
            errorMessage.includes('connection')) {
          throw new Error('L·ªói m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i.');
        }
        
        // Authentication errors from API response
        if (errorMessage.includes('authentication') ||
            errorMessage.includes('token')) {
          throw new Error('X√°c th·ª±c th·∫•t b·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        }
        
        // If it's already our custom error, re-throw it
        if (errorMessage.includes('x√°c th·ª±c th·∫•t b·∫°i') || 
            errorMessage.includes('l·ªói m·∫°ng')) {
          throw error;
        }
      }
      
      // For any other errors, provide a generic message
      throw new Error('Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }
};
